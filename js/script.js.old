var MAPSIZE = 8;
var MAXDENSITY = 3;
var LOOPTIME = 1000;
var mapAge = 0;

/**
 * Game Loop
 */

var loop = function() {
  scanMap(function(square) { 
    if (square.attr("data-type") === 'residential') {
      growResidential(square);  
    }
  });
  
  
  //restart it
  mapAge++;
  setTimeout(loop, LOOPTIME);
}
$(document).ready(function(){
  loop();
});



$(document).ready(function(){
  // Event delegation, a la 24 Ways: 
  // http://24ways.org/2011/your-jquery-now-with-less-suck
  $('table#map').on('click','td',function() {
    var thisSquare = $(this);
    var id = thisSquare.attr("id");
    var position = getPositionFromID(id);
    
    if (thisSquare.attr("data-type") === undefined) {
      thisSquare.attr("data-type", 'residential');
      thisSquare.attr("data-density", 0);
      thisSquare.text("0");
    }
    else if (thisSquare.attr("data-type") === 'residential') {
      thisSquare.attr("data-type", 'commercial');
    }
    else if (thisSquare.attr("data-type") === 'commercial') {
      thisSquare.attr("data-type", 'industrial');
    }
    else {
      thisSquare.removeAttr("data-type");
      thisSquare.removeAttr("data-density");
      thisSquare.text('');
    }
    
    var adjacentCount = countAdjacent(thisSquare, 1);
    console.log("residential: " + adjacentCount.residential);
    
  });
});


var Map = function() {};
Map.prototype = {
  size: MAPSIZE,
  
  create: function(){
    this.squares = [];
  
    for(var y=1; y <= MAPSIZE; y++) {
      var row = [];
      for(var x=1; x <= MAPSIZE; x++) {
        row[x] = x+'x'+y;
      }
      this.squares[y] = row;
    } 
  }
};

function scanMap(callback) {
  for(var y=1; y <= MAPSIZE; y++) {
    for(var x=1; x <= MAPSIZE; x++) {
      callback($("table#map").find("#"+ getIDFromPosition([x,y])));
    }
  } 
}

function countAdjacent(square, distance) {
  var count = {
    residential: 0,
    commercial: 0,
    industrial: 0
  }
  var squarePosition = getPositionFromID(square.attr('id'));
  for (var y = squarePosition[1] - distance; y <= squarePosition[1] + distance; y++) {
    if ( (y > 0) && (y <= MAPSIZE)) { // not beyond border of map
      for (var x = squarePosition[0] - distance; x <= squarePosition[0] + distance; x++) {
        if ( (x > 0) && (x <= MAPSIZE) ) { // not beyond border of map
          if ( (x != squarePosition[0]) || (y != squarePosition[1]) ) { // not the square itself
            var adjacentSquare = $('#'+getIDFromPosition([x,y]));
//            console.log(adjacentSquare);
            if (adjacentSquare.attr("data-type") != undefined) {
              count[adjacentSquare.attr("data-type")]++;
            }
          }
        }
      }
    }
  }
  return count;
}

function growResidential(square) {
  var adjacentCount = countAdjacent(square, 1);
  
  var density = parseInt(square.attr("data-density"));
  if (density == 0) {
    setDensity(square, 1);
  }
  else {
    if ( (adjacentCount.residential > 6) && (density < MAXDENSITY) ) {
      setDensity(square, density + 1);
    }
  }
}

function setDensity(square, density) {
  square.attr("data-density", density);
  square.text(density);
}




